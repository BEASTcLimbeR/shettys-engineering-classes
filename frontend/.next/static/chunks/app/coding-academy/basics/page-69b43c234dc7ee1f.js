(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[512],{29033:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>N});var r=t(73365),i=t(1521),a=t(65873),s=t(97907),o=t(81e3),l=t(40545),d=t(31691),c=t(90186),u=t(86389),p=t(60053),m=t(58549),f=t(72855),g=t(51196),h=t(59042),y=t(17020),b=t(50627),v=t(93439);let x=(0,v.A)((0,r.jsx)("path",{d:"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z"}),"ArrowBack");var A=t(71555),k=t(84721);let _=(0,v.A)((0,r.jsx)("path",{d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2m0 16H8V7h11z"}),"ContentCopy"),S=(0,v.A)((0,r.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z"}),"CheckCircle");var w=t(10413),C=t(40494);let j=(0,v.A)((0,r.jsx)("path",{d:"M6 6h12v12H6z"}),"Stop");var P=t(37027);let T=(0,v.A)((0,r.jsx)("path",{d:"M4 7v2c0 .55-.45 1-1 1H2v4h1c.55 0 1 .45 1 1v2c0 1.65 1.35 3 3 3h3v-2H7c-.55 0-1-.45-1-1v-2c0-1.3-.84-2.42-2-2.83v-.34C5.16 11.42 6 10.3 6 9V7c0-.55.45-1 1-1h3V4H7C5.35 4 4 5.35 4 7m17 3c-.55 0-1-.45-1-1V7c0-1.65-1.35-3-3-3h-3v2h3c.55 0 1 .45 1 1v2c0 1.3.84 2.42 2 2.83v.34c-1.16.41-2 1.52-2 2.83v2c0 .55-.45 1-1 1h-3v2h3c1.65 0 3-1.35 3-3v-2c0-.55.45-1 1-1h1v-4z"}),"DataObject"),F=(0,v.A)((0,r.jsx)("path",{d:"M18.5 3H6c-1.1 0-2 .9-2 2v5.71c0 3.83 2.95 7.18 6.78 7.29 3.96.12 7.22-3.06 7.22-7v-1h.5c1.93 0 3.5-1.57 3.5-3.5S20.43 3 18.5 3M16 5v3H6V5zm2.5 3H18V5h.5c.83 0 1.5.67 1.5 1.5S19.33 8 18.5 8M4 19h16v2H4z"}),"Coffee");var L=t(68980),I=t(84442),D=t(28683);let N=()=>{let e=(0,b.useRouter)(),[n,t]=(0,i.useState)(null),[v,N]=(0,i.useState)(0),[M,B]=(0,i.useState)(null),[E,z]=(0,i.useState)({}),[R,q]=(0,i.useState)({}),[H,W]=(0,i.useState)(null),[O,V]=(0,i.useState)(0),[X,G]=(0,i.useState)([]),[U,J]=(0,i.useState)(!1);(0,i.useEffect)(()=>{let e=setTimeout(()=>{J(!0)},2e3);return()=>clearTimeout(e)},[]);let K=function(e,n){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if("C"===n){if(e.includes('printf("Hello, World!")'))return"Hello, World!";else if(e.includes('printf("Age: %d")'))return"Age: 25\nSalary: 50000.50\nGrade: A\nPi: 3.14159";else if(e.includes('printf("Adult")')){let e=t[0]||"18";return parseInt(e)>=18?"Age: ".concat(e,"\nAdult\n0 1 2 3 4 5 6 7 8 9\nCount: 0\nCount: 1\nCount: 2\nCount: 3\nCount: 4"):"Age: ".concat(e,"\nMinor\n0 1 2 3 4 5 6 7 8 9\nCount: 0\nCount: 1\nCount: 2\nCount: 3\nCount: 4")}else if(e.includes("int add(int a, int b)")){let e=t[0]||"5",n=t[1]||"3",r=parseInt(e)+parseInt(n);return"Sum: ".concat(r,"\nHello, Student!")}else if(e.includes('printf("First element: %d")'))return"First element: 1\nLast element: 5\nnumbers[0] = 1\nnumbers[1] = 2\nnumbers[2] = 3\nnumbers[3] = 4\nnumbers[4] = 5";else if(e.includes('printf("Value: %d")')){let e=t[0]||"42",n=t[1]||"100";return"Value: ".concat(e,"\nAddress: 0x7fff5fbff8c8\nPointer value: ").concat(e,"\nNew value: ").concat(n)}}else if("C++"===n){if(e.includes('cout << "Hello, World!"'))return"Hello, World!";else if(e.includes("class Student")){let e=t[0]||"John",n=t[1]||"20";return"Name: ".concat(e,", Age: ").concat(n)}else if(e.includes("class Person")){let e=t[0]||"John",n=t[1]||"101";return"Student: ".concat(e,", Roll: ").concat(n)}else if(e.includes("class Shape"))return"Drawing Circle\nDrawing Rectangle";else if(e.includes("template <typename T>")){let e=t[0]||"5",n=t[1]||"3",r=parseInt(e)+parseInt(n);return"Template result: ".concat(r,"\nTemplate function and class created successfully")}else if(e.includes("vector<int> numbers")){let e=t[0]||"5";return"Vector size: ".concat(e,"\n1 3 4 5\nAlice: 95\nBob: 87")}}else if("DSA"===n){if(e.includes('cout << "Array element:"')){let e=parseInt(t[0]||"2")+1;return"Array element: ".concat(e)}else if(e.includes("vector<int> dynamicArray")){let e=t[0]||"6";return"Added element: ".concat(e,"\nVector operations completed successfully")}else if(e.includes("class LinkedList")){let e=t[0]||"42";return"Inserted node with data: ".concat(e,"\nLinked list node inserted successfully")}else if(e.includes("stack<int> s")){let e=t[0]||"30";return"Pushed: ".concat(e,"\nStack top: 20\nQueue front: 10")}else if(e.includes("class BinaryTree")){let e=t[0]||"15";return"Inserted node: ".concat(e,"\nBinary tree node inserted successfully")}else if(e.includes("class Graph")){let e=t[0]||"0";return"BFS starting from vertex: ".concat(e,"\n0 1 2 3 4")}}else if("Python"===n){if(e.includes('print("Hello, World!")'))return"Hello, World!";else if(e.includes("def greet(name):")){let e=t[0]||"Bob";return"Hello, ".concat(e,"!")}else if(e.includes("class Person:")){let e=t[0]||"Alice",n=t[1]||"25";return"Name: ".concat(e,", Age: ").concat(n)}else if(e.includes("my_list = [")){let e=t[0]||"6";return"List: [1, 2, 3, 4, 5, ".concat(e,"]\nDictionary: {'name': 'Alice', 'age': 25, 'city': 'New York'}\nSet: {1, 2, 4, 5, 6}\nTuple: (1, 2, 3)")}else if(e.includes("import numpy"))return"Linear regression model trained successfully!\nPrediction: 12.0\nModel accuracy: 95.2%"}else if("ML"===n){if(e.includes("LinearRegression()"))return"Linear regression model trained successfully!\nPrediction: 12.0\nModel accuracy: 95.2%";else if(e.includes("KMeans("))return"K-Means clustering completed!\nCluster centers: [[1.0, 2.0], [4.0, 2.0]]\nNumber of clusters: 2";else if(e.includes("Sequential()"))return"Neural network trained successfully!\nTraining accuracy: 92.5%\nTest accuracy: 90.0%";else if(e.includes("make_classification"))return"Classification dataset generated!\nFeatures: 2\nSamples: 100\nClasses: 2"}else if("Java"===n){if(e.includes('System.out.println("Hello, World!")'))return"Hello, World!";else if(e.includes('System.out.println("Age: " + age)'))return"Age: 25\nSalary: 50000.5\nGrade: A\nPi: 3.14159";else if(e.includes('System.out.println("Adult")')){let e=t[0]||"20";return parseInt(e)>=18?"Age: ".concat(e,"\nAdult\n0 1 2 3 4 5 6 7 8 9\nCount: 0\nCount: 1\nCount: 2\nCount: 3\nCount: 4"):"Age: ".concat(e,"\nMinor\n0 1 2 3 4 5 6 7 8 9\nCount: 0\nCount: 1\nCount: 2\nCount: 3\nCount: 4")}else if(e.includes("public static int add(int a, int b)")){let e=t[0]||"5",n=t[1]||"3",r=parseInt(e)+parseInt(n);return"Sum: ".concat(r,"\nHello, Student!")}else if(e.includes('System.out.println("First element: " + numbers[0])'))return"First element: 1\nLast element: 5\nnumbers[0] = 1\nnumbers[1] = 2\nnumbers[2] = 3\nnumbers[3] = 4\nnumbers[4] = 5";else if(e.includes('System.out.println("Value: " + number)')){let e=t[0]||"42",n=t[1]||"100";return"Value: ".concat(e,"\nAddress: 0x7fff5fbff8c8\nPointer value: ").concat(e,"\nNew value: ").concat(n)}}else if("DSA_Python"===n){if(e.includes("def linear_search(arr, target)")&&!e.includes("binary_search")){let e=t[0]||"7";return"Element ".concat(e," found at index: 3\nFunction linear_search took 0.000123 seconds")}else if(e.includes("numbers.append(6)"))return"Original list: [1, 2, 3, 4, 5]\nAfter adding elements: [0, 1, 2, 3, 4, 5, 6]\nAfter removing elements: [0, 1, 4, 5]\nPopped element: 5\nSquares: [1, 4, 9, 16, 25]\nInteger array: array('i', [1, 2, 3, 4, 5])";else if(e.includes("class Stack:"))return"Stack: [1, 2, 3]\nPopped: 3\nQueue: ['A', 'B', 'C']\nDequeued: A";else if(e.includes("class LinkedList:"))return t[0],"Linked List: 0 -> 1 -> 2 -> 3\nSearch 2 at position: 2\nAfter deleting 2: 0 -> 1 -> 3";else if(e.includes("class BinaryTree:"))return t[0],"Inorder traversal: 1 3 5 7 9\nPreorder traversal: 5 3 1 7 9\nPostorder traversal: 1 3 9 7 5\nFound node with data: 3";else if(e.includes("class Graph:"))return t[0],"BFS starting from vertex 2:\n[2, 0, 3, 1]\nDFS starting from vertex 2:\n[2, 0, 1, 3]\nGraph has cycle: True";else if(e.includes("def bubble_sort(arr)"))return"Original array: [64, 34, 25, 12, 22, 11, 90]\nBubble Sort: [11, 12, 22, 25, 34, 64, 90] (Time: 0.000045s)\nSelection Sort: [11, 12, 22, 25, 34, 64, 90] (Time: 0.000032s)\nInsertion Sort: [11, 12, 22, 25, 34, 64, 90] (Time: 0.000028s)\nMerge Sort: [11, 12, 22, 25, 34, 64, 90] (Time: 0.000015s)\nQuick Sort: [11, 12, 22, 25, 34, 64, 90] (Time: 0.000012s)";else if(e.includes("def linear_search(arr, target)")&&e.includes("binary_search")){let e=t[0]||"10";return"Array: [2, 3, 4, 10, 40, 50, 60, 70, 80, 90, 100]\nSearching for: ".concat(e,"\nLinear Search: Found at index 3 (Time: 0.000008s)\nBinary Search: Found at index 3 (Time: 0.000002s)\nBinary Search (Recursive): Found at index 3 (Time: 0.000003s)\nJump Search: Found at index 3 (Time: 0.000005s)")}else if(e.includes("def fibonacci_memo"))return"Fibonacci with memoization:\nF(0) = 0\nF(1) = 1\nF(2) = 1\nF(3) = 2\nF(4) = 3\nF(5) = 5\nF(6) = 8\nF(7) = 13\nF(8) = 21\nF(9) = 34\n\nFibonacci with tabulation:\nF(0) = 0\nF(1) = 1\nF(2) = 1\nF(3) = 2\nF(4) = 3\nF(5) = 5\nF(6) = 8\nF(7) = 13\nF(8) = 21\nF(9) = 34\n\nLongest Common Subsequence:\nLCS of 'ABCDGH' and 'AEDFHR': 3\n\nKnapsack Problem:\nMaximum value: 37"}if(e.includes("printf"))return"Program output displayed successfully";if(e.includes("cout"))return"C++ program executed successfully";if(e.includes("class"))return"Class definition created successfully";if(e.includes("struct"))return"Structure defined successfully";if(e.includes("template"))return"Template instantiated successfully";else if(e.includes("vector")||e.includes("stack")||e.includes("queue"))return"Data structure operations completed";else if(e.includes("for")||e.includes("while"))return"Loop executed successfully";else if(e.includes("if")||e.includes("else"))return"Conditional statement executed";else if(e.includes("function")||e.includes("void")||e.includes("int"))return"Function executed successfully";else return"Program compiled and executed successfully!"},Q=(e,n)=>{if("C"===n){if(e.includes('printf("Adult")'))return["Enter age: "];else if(e.includes("int add(int a, int b)"))return["Enter first number: ","Enter second number: "];else if(e.includes('printf("Value: %d")'))return["Enter initial value: ","Enter new value: "]}else if("C++"===n){if(e.includes("class Student"))return["Enter student name: ","Enter student age: "];else if(e.includes("class Person"))return["Enter student name: ","Enter roll number: "];else if(e.includes("template <typename T>"))return["Enter first number: ","Enter second number: "];else if(e.includes("vector<int> numbers"))return["Enter vector size: "]}else if("DSA"===n){if(e.includes('cout << "Array element:"'))return["Enter array index: "];else if(e.includes("vector<int> dynamicArray"))return["Enter element to add: "];else if(e.includes("class LinkedList"))return["Enter data for new node: "];else if(e.includes("stack<int> s"))return["Enter value to push: "];else if(e.includes("class BinaryTree"))return["Enter data for new node: "];else if(e.includes("class Graph"))return["Enter starting vertex: "]}else if("Python"===n){if(e.includes("def greet(name):"))return["Enter name: "];else if(e.includes("class Person:"))return["Enter person name: ","Enter person age: "];else if(e.includes("my_list = ["))return["Enter element to add: "];else if(e.includes("import numpy"))return["Enter number of samples: "]}else if("ML"===n){if(e.includes("LinearRegression()"))return["Enter number of features: "];else if(e.includes("KMeans("))return["Enter number of clusters: "];else if(e.includes("Sequential()"))return["Enter number of layers: "];else if(e.includes("make_classification"))return["Enter number of samples: "]}else if("Java"===n){if(e.includes('System.out.println("Adult")'))return["Enter age: "];else if(e.includes("public static int add(int a, int b)"))return["Enter first number: ","Enter second number: "];else if(e.includes('System.out.println("Value: " + number)'))return["Enter initial value: ","Enter new value: "]}else if("DSA_Python"===n){if(e.includes("def linear_search(arr, target)")&&!e.includes("binary_search"))return["Enter target element: "];else if(e.includes("class LinkedList:"))return["Enter data for new node: "];else if(e.includes("class BinaryTree:"))return["Enter data for new node: "];else if(e.includes("class Graph:"))return["Enter starting vertex: "];else if(e.includes("def linear_search(arr, target)")&&e.includes("binary_search"))return["Enter target element: "]}return[]},Y=async(e,n,t)=>{let r=Q(n,t);if(r.length>0)W(e),V(0),G([]),q(n=>({...n,[e]:r}));else{B(e),await new Promise(e=>setTimeout(e,1500));let r=K(n,t);z(n=>({...n,[e]:r})),B(null)}},$=async(e,n,t)=>{if(O<Q(n,t).length-1)V(e=>e+1);else{W(null),B(e),await new Promise(e=>setTimeout(e,1500));let r=K(n,t,X);z(n=>({...n,[e]:r})),B(null),G([])}},Z=async(e,n)=>{try{await navigator.clipboard.writeText(e),t(n),setTimeout(()=>t(null),2e3)}catch(e){console.error("Failed to copy text: ",e)}},ee=(e,t)=>(0,r.jsx)(a.A,{sx:{display:"grid",gridTemplateColumns:{xs:"1fr",md:"1fr 1fr"},gap:4},children:e.map((e,i)=>{var u,p;return(0,r.jsx)(h.P.div,{initial:{opacity:0,y:30},animate:{opacity:1,y:0},transition:{duration:.8,delay:.1*i},children:(0,r.jsxs)(s.A,{elevation:0,sx:{background:"rgba(255, 255, 255, 0.05)",backdropFilter:"blur(20px)",border:"1px solid rgba(255, 255, 255, 0.1)",borderRadius:3,p:3,height:"100%",transition:"all 0.3s ease","&:hover":{transform:"translateY(-8px)",boxShadow:"0 20px 40px rgba(0, 0, 0, 0.3)",border:"1px solid rgba(0, 212, 255, 0.3)"}},children:[(0,r.jsxs)(a.A,{sx:{display:"flex",alignItems:"center",mb:2},children:[(0,r.jsx)(o.A,{variant:"h3",sx:{mr:2,fontSize:"2rem"},children:e.icon}),(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h6",sx:{color:"#fff",fontWeight:600,mb:.5},children:e.title}),(0,r.jsx)(l.A,{label:e.difficulty,size:"small",sx:{background:"Beginner"===e.difficulty?"linear-gradient(135deg, #4caf50 0%, #45a049 100%)":"Intermediate"===e.difficulty?"linear-gradient(135deg, #ff9800 0%, #f57c00 100%)":"linear-gradient(135deg, #f44336 0%, #d32f2f 100%)",color:"#fff",fontWeight:600}})]})]}),(0,r.jsx)(o.A,{variant:"body2",sx:{color:"#b0b0b0",mb:3,lineHeight:1.6},children:e.description}),(0,r.jsxs)(a.A,{sx:{mb:3},children:[(0,r.jsx)(o.A,{variant:"subtitle2",sx:{color:"#00d4ff",fontWeight:600,mb:1,fontSize:"0.9rem"},children:"\uD83D\uDCD6 Definition"}),(0,r.jsx)(o.A,{variant:"body2",sx:{color:"#d4d4d4",lineHeight:1.6,mb:2,fontStyle:"italic"},children:e.definition}),(0,r.jsx)(o.A,{variant:"subtitle2",sx:{color:"#00d4ff",fontWeight:600,mb:1,fontSize:"0.9rem"},children:"\uD83C\uDFAF Key Concepts"}),(0,r.jsx)(a.A,{sx:{display:"flex",flexWrap:"wrap",gap:1,mb:2},children:null==(u=e.keyConcepts)?void 0:u.map((e,n)=>(0,r.jsx)(l.A,{label:e,size:"small",sx:{background:"rgba(0, 212, 255, 0.1)",color:"#00d4ff",border:"1px solid rgba(0, 212, 255, 0.3)",fontSize:"0.75rem",height:"24px"}},n))})]}),(0,r.jsxs)(a.A,{sx:{background:"#1e1e1e",borderRadius:2,p:2,mb:2,border:"1px solid rgba(255, 255, 255, 0.1)",position:"relative"},children:[(0,r.jsxs)(a.A,{sx:{display:"flex",justifyContent:"space-between",alignItems:"center",mb:2,pb:1,borderBottom:"1px solid rgba(255, 255, 255, 0.1)"},children:[(0,r.jsx)(o.A,{variant:"caption",sx:{color:"#888",fontWeight:600},children:"C"===t?"main.c":"main.cpp"}),(0,r.jsxs)(a.A,{sx:{display:"flex",gap:1},children:[(0,r.jsx)(d.A,{size:"small",onClick:()=>Z(e.code||"",i),sx:{color:n===i?"#4caf50":"#888","&:hover":{color:"#00d4ff"}},children:n===i?(0,r.jsx)(S,{}):(0,r.jsx)(_,{})}),(0,r.jsx)(d.A,{size:"small",onClick:()=>M===i?void(B(null),W(null),z(e=>{let n={...e};return delete n[i],n}),G([])):Y(i,e.code||"",t),sx:{color:M===i?"#f44336":"#888","&:hover":{color:M===i?"#ff4444":"#00d4ff"}},children:M===i?(0,r.jsx)(j,{}):(0,r.jsx)(k.A,{})})]})]}),(0,r.jsx)(a.A,{component:"pre",sx:{color:"#d4d4d4",fontFamily:'"Fira Code", "Monaco", "Consolas", monospace',fontSize:"0.875rem",lineHeight:1.5,margin:0,whiteSpace:"pre-wrap",wordBreak:"break-word","& .keyword":{color:"#569cd6"},"& .string":{color:"#ce9178"},"& .comment":{color:"#6a9955"},"& .function":{color:"#dcdcaa"},"& .number":{color:"#b5cea8"},"& .class":{color:"#4ec9b0"}},dangerouslySetInnerHTML:{__html:e.code||"".replace(/\b(int|void|return|if|else|for|while|printf|include|main|class|public|private|protected|virtual|template|typename|vector|map|stack|queue|struct|new|delete|cout|cin|endl|using|namespace|std|def|import|from|as|True|False|None|self|__init__|print|range|len|append|remove|add|pop|fit|predict|transform|reshape|array|plt|show|scatter|plot|legend|xlabel|ylabel|title|cmap|alpha|random_state|test_size|n_clusters|n_samples|n_features|n_informative|n_redundant|epochs|batch_size|verbose|optimizer|loss|metrics|accuracy|binary_crossentropy|adam|relu|sigmoid|Sequential|Dense|KMeans|LinearRegression|make_classification|StandardScaler|train_test_split|static|String|System|out|println|args|HelloWorld|Variables|ControlStructures|Functions|Arrays|Pointers)\b/g,'<span class="keyword">$1</span>').replace(/"([^"]*)"/g,'<span class="string">"$1"</span>').replace(/'([^']*)'/g,"<span class=\"string\">'$1'</span>").replace(/\b(\d+\.?\d*)\b/g,'<span class="number">$1</span>').replace(/\b(printf|cout|cin|endl|print|fit|predict|transform|reshape|append|remove|add|pop|show|scatter|plot|legend|xlabel|ylabel|title|System\.out\.println)\b/g,'<span class="function">$1</span>').replace(/\b(Student|Person|Shape|Circle|Rectangle|Node|TreeNode|Graph|LinkedList|BinaryTree|CustomStack|Person|LinearRegression|KMeans|Sequential|Dense|StandardScaler|HelloWorld|Variables|ControlStructures|Functions|Arrays|Pointers)\b/g,'<span class="class">$1</span>').replace(/#.*$/gm,'<span class="comment">$&</span>')}}),H===i&&(0,r.jsxs)(a.A,{sx:{mt:2,p:2,background:"#2a2a2a",borderRadius:1,border:"1px solid rgba(255, 255, 255, 0.1)",position:"relative"},children:[(0,r.jsx)(o.A,{variant:"caption",sx:{color:"#ff9800",fontWeight:600,display:"block",mb:1},children:"\uD83D\uDCE5 Input Required"}),(0,r.jsx)(o.A,{variant:"body2",sx:{color:"#d4d4d4",mb:2,fontFamily:'"Fira Code", "Monaco", "Consolas", monospace'},children:null==(p=R[i])?void 0:p[O]}),(0,r.jsxs)(a.A,{sx:{display:"flex",gap:1,alignItems:"center"},children:[(0,r.jsx)("input",{type:"text",value:X[O]||"",onChange:e=>{var n;return n=e.target.value,void G(e=>{let t=[...e];return t[O]=n,t})},onKeyPress:n=>{"Enter"===n.key&&$(i,e.code||"",t)},style:{background:"#1e1e1e",border:"1px solid rgba(255, 255, 255, 0.2)",borderRadius:"4px",padding:"8px 12px",color:"#d4d4d4",fontFamily:'"Fira Code", "Monaco", "Consolas", monospace',fontSize:"0.875rem",outline:"none",flex:1},placeholder:"Enter value..."}),(0,r.jsx)(c.A,{size:"small",variant:"contained",onClick:()=>$(i,e.code||"",t),sx:{background:"linear-gradient(135deg, #00d4ff 0%, #0099cc 100%)",color:"#fff",px:2,py:.5,fontSize:"0.75rem","&:hover":{background:"linear-gradient(135deg, #0099cc 0%, #007399 100%)"}},children:"Submit"})]})]}),E[i]&&(0,r.jsxs)(a.A,{sx:{mt:2,p:2,background:"#2a2a2a",borderRadius:1,border:"1px solid rgba(255, 255, 255, 0.1)",position:"relative"},children:[(0,r.jsx)(o.A,{variant:"caption",sx:{color:"#4caf50",fontWeight:600,display:"block",mb:1},children:"\uD83D\uDCE4 Output"}),(0,r.jsx)(a.A,{component:"pre",sx:{color:"#d4d4d4",fontFamily:'"Fira Code", "Monaco", "Consolas", monospace',fontSize:"0.875rem",lineHeight:1.5,margin:0,whiteSpace:"pre-wrap",wordBreak:"break-word"},children:E[i]})]})]}),(0,r.jsx)(o.A,{variant:"body2",sx:{color:"#888",fontStyle:"italic",lineHeight:1.6},children:e.explanation})]})},i)})});return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(y.N,{children:!U&&(0,r.jsx)(h.P.div,{initial:{opacity:1},exit:{opacity:0},transition:{duration:.5},children:(0,r.jsx)(I.A,{animationData:D,overlay:!0})})}),(0,r.jsx)(h.P.div,{initial:{opacity:0},animate:{opacity:+!!U},transition:{duration:.8,delay:.2},children:(0,r.jsxs)(a.A,{sx:{minHeight:"100vh",background:"linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%)",position:"relative",overflow:"hidden"},children:[(0,r.jsx)(a.A,{component:h.P.div,animate:{scale:[1,1.1,1],rotate:[0,180,360]},transition:{duration:20,repeat:1/0,ease:"linear"},sx:{position:"absolute",top:"10%",right:"10%",width:"300px",height:"300px",borderRadius:"50%",background:"radial-gradient(circle, rgba(0, 123, 255, 0.1) 0%, transparent 70%)",filter:"blur(40px)",zIndex:0}}),(0,r.jsx)(a.A,{component:h.P.div,animate:{scale:[1.1,1,1.1],rotate:[360,180,0]},transition:{duration:25,repeat:1/0,ease:"linear"},sx:{position:"absolute",bottom:"10%",left:"5%",width:"250px",height:"250px",borderRadius:"50%",background:"radial-gradient(circle, rgba(255, 107, 53, 0.1) 0%, transparent 70%)",filter:"blur(30px)",zIndex:0}}),(0,r.jsx)(u.A,{position:"fixed",sx:{background:"rgba(15, 15, 35, 0.95)",backdropFilter:"blur(20px)",borderBottom:"1px solid rgba(255, 255, 255, 0.1)",boxShadow:"0 8px 32px rgba(0, 0, 0, 0.3)"},children:(0,r.jsxs)(p.A,{children:[(0,r.jsxs)(a.A,{sx:{display:"flex",alignItems:"center",gap:2},children:[(0,r.jsx)(c.A,{startIcon:(0,r.jsx)(x,{}),onClick:()=>e.back(),sx:{color:"#fff","&:hover":{background:"rgba(255, 255, 255, 0.1)"}},children:"Back"}),(0,r.jsxs)(a.A,{sx:{textAlign:"left",flex:1,minWidth:0},children:[(0,r.jsxs)(o.A,{variant:"h6",sx:{color:"#fff",fontWeight:700,fontSize:{xs:"0.7rem",sm:"0.8rem",md:"0.9rem"},lineHeight:1.2,wordBreak:"break-all",overflowWrap:"break-word",whiteSpace:"pre-line"},children:["SHETTY_SIR's","\n","CODING_ACADEMY"]}),(0,r.jsx)(o.A,{variant:"caption",sx:{color:"#00d4ff",fontWeight:600,fontSize:"0.75rem",letterSpacing:"0.5px"},children:"Code, Create, Conquer!"})]})]}),(0,r.jsx)(a.A,{sx:{flexGrow:1}}),(0,r.jsx)(l.A,{icon:(0,r.jsx)(A.A,{}),label:"Programming Basics",sx:{background:"linear-gradient(135deg, #00d4ff 0%, #0099cc 100%)",color:"#fff",fontWeight:600}})]})}),(0,r.jsxs)(m.A,{maxWidth:"lg",sx:{pt:"80px",pb:4},children:[(0,r.jsx)(h.P.div,{initial:{opacity:0,y:30},animate:{opacity:1,y:0},transition:{duration:.8},children:(0,r.jsxs)(a.A,{sx:{textAlign:"center",mb:6},children:[(0,r.jsx)(o.A,{variant:"h1",sx:{fontSize:{xs:"2.5rem",sm:"3.5rem",md:"4rem"},fontWeight:900,background:"linear-gradient(135deg, #00d4ff 0%, #0099cc 100%)",backgroundClip:"text",WebkitBackgroundClip:"text",WebkitTextFillColor:"transparent",mb:2},children:"Programming Basics"}),(0,r.jsx)(o.A,{variant:"h5",sx:{color:"#b0b0b0",fontWeight:400,maxWidth:"600px",mx:"auto"},children:"Master C, C++, Java, Python, Data Structures & Algorithms, and Machine Learning with interactive examples"})]})}),(0,r.jsx)(h.P.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.8,delay:.2},children:(0,r.jsx)(s.A,{elevation:0,sx:{background:"rgba(255, 255, 255, 0.05)",backdropFilter:"blur(20px)",border:"1px solid rgba(255, 255, 255, 0.1)",borderRadius:3,mb:4,overflow:"hidden"},children:(0,r.jsxs)(f.A,{value:v,onChange:(e,n)=>N(n),variant:"scrollable",scrollButtons:"auto",allowScrollButtonsMobile:!0,sx:{"& .MuiTab-root":{color:"#b0b0b0",fontWeight:600,textTransform:"none",fontSize:"1rem",minHeight:"64px",minWidth:"auto",padding:"12px 16px","&.Mui-selected":{color:"#00d4ff"}},"& .MuiTabs-indicator":{background:"linear-gradient(135deg, #00d4ff 0%, #0099cc 100%)",height:"3px"},"& .MuiTabs-scrollButtons":{color:"#b0b0b0","&.Mui-disabled":{opacity:.3}}},children:[(0,r.jsx)(g.A,{icon:(0,r.jsx)(A.A,{}),label:"C Programming",iconPosition:"start"}),(0,r.jsx)(g.A,{icon:(0,r.jsx)(w.A,{}),label:"C++ Programming",iconPosition:"start"}),(0,r.jsx)(g.A,{icon:(0,r.jsx)(C.A,{}),label:"Data Structures & Algorithms",iconPosition:"start"}),(0,r.jsx)(g.A,{icon:(0,r.jsx)(P.A,{}),label:"Python",iconPosition:"start"}),(0,r.jsx)(g.A,{icon:(0,r.jsx)(A.A,{}),label:"DSA with Python",iconPosition:"start"}),(0,r.jsx)(g.A,{icon:(0,r.jsx)(T,{}),label:"Machine Learning",iconPosition:"start"}),(0,r.jsx)(g.A,{icon:(0,r.jsx)(F,{}),label:"Java Programming",iconPosition:"start"})]})})}),(0,r.jsx)(y.N,{mode:"wait",children:(0,r.jsxs)(h.P.div,{initial:{opacity:0,x:20},animate:{opacity:1,x:0},exit:{opacity:0,x:-20},transition:{duration:.5},children:[0===v&&(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h4",sx:{color:"#fff",fontWeight:700,mb:4,textAlign:"center"},children:"C Programming Fundamentals"}),ee([{title:"Introduction to C Programming",description:"Learn the fundamentals of C programming language",icon:"\uD83D\uDD24",difficulty:"Beginner",definition:"C is a general-purpose, procedural programming language developed by Dennis Ritchie in 1972. It is a low-level language that provides direct access to memory and hardware, making it efficient for system programming.",keyConcepts:["Procedural Programming","Low-level Memory Access","Portability","Efficiency"],code:'#include <stdio.h>\n\nint main() {\n    printf("Hello, World!");\n    return 0;\n}',explanation:"This is the basic structure of a C program. The #include directive includes the standard input/output library, and main() is the entry point of the program."},{title:"Variables and Data Types",description:"Understanding different data types in C",icon:"\uD83D\uDCCA",difficulty:"Beginner",definition:"Variables are named memory locations that store data values. Data types define the type and size of data that can be stored in variables.",keyConcepts:["Memory Allocation","Type Safety","Size Specifications","Value Storage"],code:'int age = 25;\nfloat salary = 50000.50;\nchar grade = \'A\';\ndouble pi = 3.14159;\n\nprintf("Age: %d\\n", age);\nprintf("Salary: %.2f\\n", salary);\nprintf("Grade: %c\\n", grade);\nprintf("Pi: %.5f\\n", pi);',explanation:"C supports various data types: int for integers, float for decimals, char for characters, and double for high-precision decimals."},{title:"Control Structures",description:"Mastering loops and conditional statements",icon:"\uD83D\uDD04",difficulty:"Intermediate",definition:"Control structures are programming constructs that determine the flow of program execution based on conditions and loops.",keyConcepts:["Conditional Logic","Loop Control","Flow Control","Decision Making"],code:'// If-else statement\nif (age >= 18) {\n    printf("Adult\\n");\n} else {\n    printf("Minor\\n");\n}\n\n// For loop\nfor (int i = 0; i < 10; i++) {\n    printf("%d ", i);\n}\n\n// While loop\nint count = 0;\nwhile (count < 5) {\n    printf("Count: %d\\n", count);\n    count++;\n}',explanation:"Control structures allow you to make decisions and repeat code blocks. Use if-else for conditions, for/while for loops."},{title:"Functions",description:"Creating reusable code blocks",icon:"⚙️",difficulty:"Intermediate",definition:"Functions are self-contained blocks of code that perform specific tasks. They promote code reusability and modularity.",keyConcepts:["Code Reusability","Modularity","Parameter Passing","Return Values"],code:'// Function declaration\nint add(int a, int b) {\n    return a + b;\n}\n\n// Function with void return type\nvoid greet(char name[]) {\n    printf("Hello, %s!\\n", name);\n}\n\nint main() {\n    int result = add(5, 3);\n    printf("Sum: %d\\n", result);\n    \n    greet("Student");\n    return 0;\n}',explanation:"Functions help organize code into reusable blocks. They can return values or perform actions without returning anything (void)."},{title:"Arrays",description:"Working with collections of data",icon:"\uD83D\uDCE6",difficulty:"Intermediate",definition:"Arrays are collections of elements of the same data type stored in contiguous memory locations.",keyConcepts:["Contiguous Memory","Index-based Access","Fixed Size","Homogeneous Data"],code:'// Array declaration and initialization\nint numbers[5] = {1, 2, 3, 4, 5};\n\n// Accessing array elements\nprintf("First element: %d\\n", numbers[0]);\nprintf("Last element: %d\\n", numbers[4]);\n\n// Looping through array\nfor (int i = 0; i < 5; i++) {\n    printf("numbers[%d] = %d\\n", i, numbers[i]);\n}',explanation:"Arrays store multiple values of the same type. Elements are accessed using index numbers starting from 0."},{title:"Pointers",description:"Understanding memory addresses",icon:"\uD83D\uDCCD",difficulty:"Advanced",definition:"Pointers are variables that store memory addresses of other variables. They provide direct access to memory locations.",keyConcepts:["Memory Addresses","Indirect Access","Dynamic Memory","Address Arithmetic"],code:'int number = 42;\nint *ptr = &number;  // Pointer to number\n\nprintf("Value: %d\\n", number);\nprintf("Address: %p\\n", (void*)&number);\nprintf("Pointer value: %d\\n", *ptr);\n\n// Modifying value through pointer\n*ptr = 100;\nprintf("New value: %d\\n", number);',explanation:"Pointers store memory addresses. They allow direct manipulation of memory and are fundamental to C programming."}],"C")]}),1===v&&(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h4",sx:{color:"#fff",fontWeight:700,mb:4,textAlign:"center"},children:"C++ Object-Oriented Programming"}),ee([{title:"Introduction to C++",description:"Learn object-oriented programming with C++",icon:"⚡",difficulty:"Beginner",definition:"C++ is an extension of C that adds object-oriented programming features. It combines procedural and object-oriented programming paradigms.",keyConcepts:["Object-Oriented Programming","Encapsulation","Inheritance","Polymorphism"],code:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Hello, World!"<< endl;\n    return 0;\n}',explanation:"C++ is an extension of C with object-oriented features. The iostream library provides input/output functionality."},{title:"Classes and Objects",description:"Understanding object-oriented programming",icon:"\uD83C\uDFD7️",difficulty:"Intermediate",definition:"Classes are user-defined data types that encapsulate data and functions. Objects are instances of classes that contain data and behavior.",keyConcepts:["Encapsulation","Data Hiding","Member Functions","Constructor/Destructor"],code:'class Student {\nprivate:\n    string name;\n    int age;\n    \npublic:\n    Student(string n, int a) {\n        name = n;\n        age = a;\n    }\n    \n    void display() {\n        cout << "Name: "<< name << ", Age: "<< age << endl;\n    }\n};\n\nint main() {\n    Student student("John", 20);\n    student.display();\n    return 0;\n}',explanation:"Classes are user-defined data types that encapsulate data and functions. Objects are instances of classes."},{title:"Inheritance",description:"Creating class hierarchies",icon:"\uD83C\uDF33",difficulty:"Intermediate",definition:"Inheritance is a mechanism that allows a class to inherit properties and methods from another class, promoting code reuse and hierarchy.",keyConcepts:["Code Reuse","Hierarchy","Base/Derived Classes","Access Specifiers"],code:'class Person {\nprotected:\n    string name;\npublic:\n    Person(string n) : name(n) {}\n    virtual void display() {\n        cout << "Name: "<< name << endl;\n    }\n};\n\nclass Student : public Person {\nprivate:\n    int rollNo;\npublic:\n    Student(string n, int r) : Person(n), rollNo(r) {}\n    void display() override {\n        cout << "Student: "<< name << ", Roll: "<< rollNo << endl;\n    }\n};',explanation:"Inheritance allows a class to inherit properties from another class, promoting code reuse and hierarchy."},{title:"Polymorphism",description:"Using virtual functions and overriding",icon:"\uD83D\uDD04",difficulty:"Advanced",definition:"Polymorphism allows objects of different classes to be treated as objects of a common base class through virtual functions.",keyConcepts:["Virtual Functions","Method Overriding","Runtime Binding","Abstract Classes"],code:'class Shape {\npublic:\n    virtual void draw() = 0;  // Pure virtual function\n    virtual ~Shape() {}\n};\n\nclass Circle : public Shape {\npublic:\n    void draw() override {\n        cout << "Drawing Circle"<< endl;\n    }\n};\n\nclass Rectangle : public Shape {\npublic:\n    void draw() override {\n        cout << "Drawing Rectangle"<< endl;\n    }\n};',explanation:"Polymorphism allows different classes to be treated as instances of the same base class through virtual functions."},{title:"Templates",description:"Generic programming with templates",icon:"\uD83D\uDD27",difficulty:"Advanced",definition:"Templates allow generic programming by creating functions and classes that work with any data type without code duplication.",keyConcepts:["Generic Programming","Type Independence","Code Reusability","Compile-time Polymorphism"],code:"template <typename T>\nT add(T a, T b) {\n    return a + b;\n}\n\ntemplate <typename T>\nclass Stack {\nprivate:\n    vector<T> elements;\npublic:\n    void push(T element) {\n        elements.push_back(element);\n    }\n    T pop() {\n        T element = elements.back();\n        elements.pop_back();\n        return element;\n    }\n};",explanation:"Templates allow generic programming by creating functions and classes that work with any data type."},{title:"STL (Standard Template Library)",description:"Using built-in data structures and algorithms",icon:"\uD83D\uDCDA",difficulty:"Intermediate",definition:"STL is a collection of template classes and functions that provide ready-to-use data structures and algorithms for efficient programming.",keyConcepts:["Containers","Algorithms","Iterators","Function Objects"],code:'#include <vector>\n#include <algorithm>\n#include <map>\n\nint main() {\n    // Vector\nvector<int> numbers = {3, 1, 4, 1, 5};\nsort(numbers.begin(), numbers.end());\n    \n    // Map\n    map<string, int> scores;\n    scores["Alice"] = 95;\n    scores["Bob"] = 87;\n    \n    // Iterating\n    for (const auto& pair : scores) {\n        cout << pair.first << ": "<< pair.second << endl;\n    }\n    return 0;\n}',explanation:"STL provides ready-to-use data structures and algorithms for efficient programming."}],"C++")]}),2===v&&(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h4",sx:{color:"#fff",fontWeight:700,mb:4,textAlign:"center"},children:"Data Structures & Algorithms"}),ee([{title:"Introduction to Data Structures",description:"Understanding fundamental data organization",icon:"\uD83C\uDFD7️",difficulty:"Beginner",definition:"Data structures are specialized formats for organizing and storing data in a computer so that it can be accessed and modified efficiently.",keyConcepts:["Data Organization","Memory Efficiency","Access Patterns","Algorithm Complexity"],code:'// Basic structure for a node\nstruct Node {\n    int data;\n    Node* next;\n    Node(int val) : data(val), next(nullptr) {}\n};\n\n// Array implementation\nint arr[5] = {1, 2, 3, 4, 5};\ncout << "Array element: "<< arr[2] << endl;',explanation:"Data structures are ways of organizing and storing data for efficient access and modification."},{title:"Arrays and Vectors",description:"Linear data structures",icon:"\uD83D\uDCCA",difficulty:"Beginner",definition:"Arrays are collections of elements stored in contiguous memory locations. Vectors are dynamic arrays that can grow and shrink automatically.",keyConcepts:["Contiguous Memory","Index-based Access","Dynamic Sizing","Random Access"],code:"#include <vector>\n\n// Static array\nint staticArray[5] = {1, 2, 3, 4, 5};\n\n// Dynamic vector\nvector<int> dynamicArray = {1, 2, 3, 4, 5};\ndynamicArray.push_back(6);  // Add element\ndynamicArray.pop_back();     // Remove last element\n\n// 2D array\nint matrix[3][3] = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};",explanation:"Arrays store elements in contiguous memory. Vectors are dynamic arrays that can grow and shrink."},{title:"Linked Lists",description:"Dynamic data structure with nodes",icon:"\uD83D\uDD17",difficulty:"Intermediate",definition:"Linked lists are linear data structures where elements are stored in nodes, and each node contains a data field and a reference to the next node.",keyConcepts:["Node Structure","Dynamic Memory","Sequential Access","Insertion/Deletion"],code:"struct Node {\n    int data;\n    Node* next;\n    Node(int val) : data(val), next(nullptr) {}\n};\n\nclass LinkedList {\nprivate:\n    Node* head;\npublic:\n    LinkedList() : head(nullptr) {}\n    \n    void insertAtEnd(int data) {\n        Node* newNode = new Node(data);\n        if (!head) {\n            head = newNode;\n            return;\n        }\n        Node* current = head;\n        while (current->next) {\n            current = current->next;\n        }\n        current->next = newNode;\n    }\n};",explanation:"Linked lists consist of nodes connected by pointers. They allow dynamic memory allocation and efficient insertion/deletion."},{title:"Stacks and Queues",description:"LIFO and FIFO data structures",icon:"\uD83D\uDCDA",difficulty:"Intermediate",definition:"Stacks follow LIFO (Last In First Out) principle, while queues follow FIFO (First In First Out) principle for data access.",keyConcepts:["LIFO/FIFO","Push/Pop Operations","Peek/Top","Bounded/Unbounded"],code:"#include <stack>\n#include <queue>\n\n// Stack (LIFO)\nstack<int> s;\ns.push(10);\ns.push(20);\nint topElement = s.top();  // 20\ns.pop();  // removes 20\n\n// Queue (FIFO)\nqueue<int> q;\nq.push(10);\nq.push(20);\nint frontElement = q.front();  // 10\nq.pop();  // removes 10\n\n// Custom Stack implementation\nclass CustomStack {\nprivate:\n    vector<int> elements;\npublic:\n    void push(int val) { elements.push_back(val); }\n    int pop() {\n        int val = elements.back();\n        elements.pop_back();\n        return val;\n    }\n};",explanation:"Stacks follow LIFO (Last In First Out) while queues follow FIFO (First In First Out) principle."},{title:"Trees and Binary Trees",description:"Hierarchical data structures",icon:"\uD83C\uDF33",difficulty:"Advanced",definition:"Trees are hierarchical data structures with nodes connected by edges. Binary trees have at most two children per node.",keyConcepts:["Hierarchy","Parent-Child Relationship","Traversal","Balanced/Unbalanced"],code:"struct TreeNode {\n    int data;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass BinaryTree {\nprivate:\n    TreeNode* root;\npublic:\n    BinaryTree() : root(nullptr) {}\n    \n    void insert(int data) {\n        root = insertRec(root, data);\n    }\n    \n    TreeNode* insertRec(TreeNode* node, int data) {\n        if (!node) return new TreeNode(data);\n        if (data < node->data)\n            node->left = insertRec(node->left, data);\n        else\n            node->right = insertRec(node->right, data);\n        return node;\n    }\n};",explanation:"Trees are hierarchical data structures. Binary trees have at most two children per node."},{title:"Graphs and Algorithms",description:"Complex data structures and algorithms",icon:"\uD83D\uDD78️",difficulty:"Advanced",definition:"Graphs are data structures consisting of vertices (nodes) connected by edges. They represent relationships between objects.",keyConcepts:["Vertices and Edges","Directed/Undirected","Weighted/Unweighted","Traversal Algorithms"],code:'#include <vector>\n#include <queue>\n\nclass Graph {\nprivate:\n    vector<vector<int>> adjacencyList;\n    int vertices;\npublic:\n    Graph(int v) : vertices(v) {\n        adjacencyList.resize(v);\n    }\n    \n    void addEdge(int u, int v) {\n        adjacencyList[u].push_back(v);\n        adjacencyList[v].push_back(u);  // Undirected\n    }\n    \n    void BFS(int start) {\n        vector<bool> visited(vertices, false);\nqueue<int> q;\n        visited[start] = true;\n        q.push(start);\n        \n        while (!q.empty()) {\n            int vertex = q.front();\n            cout << vertex << " ";\n            q.pop();\n            \n            for (int neighbor : adjacencyList[vertex]) {\n                if (!visited[neighbor]) {\n                    visited[neighbor] = true;\n                    q.push(neighbor);\n                }\n            }\n        }\n    }\n};',explanation:"Graphs represent relationships between objects. BFS and DFS are fundamental traversal algorithms."}],"DSA")]}),3===v&&(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h4",sx:{color:"#fff",fontWeight:700,mb:4,textAlign:"center"},children:"Python Basics"}),ee([{title:"Introduction to Python",description:"Learn the basics of Python programming",icon:"\uD83D\uDC0D",difficulty:"Beginner",definition:"Python is a high-level, interpreted programming language known for its clear syntax and readability. It is widely used for web development, data analysis, artificial intelligence, and more.",keyConcepts:["High-level Language","Interpreted","Readability","Versatility"],code:'# Basic print statement\nprint("Hello, World!")\n\n# Variables and data types\nx = 10\ny = 3.14\nname = "Alice"\nis_student = True\n\n# Arithmetic operations\nsum = x + y\nproduct = x * y\n\n# String operations\ngreeting = "Hello, " + name\n\n# Conditional statements\nif is_student:\n    print("You are a student!")\nelse:\n    print("You are not a student.")\n\n# Loops\nfor i in range(5):\n    print(i)\n\n# Functions\ndef greet(name):\n    print(f"Hello, {name}!")\n\ngreet("Bob")',explanation:"Python is a high-level, interpreted programming language known for its clear syntax and readability."},{title:"Object-Oriented Programming in Python",description:"Understanding object-oriented programming concepts in Python",icon:"\uD83C\uDFD7️",difficulty:"Intermediate",definition:"Python supports object-oriented programming. Classes are defined using the 'class' keyword, and objects are instances of classes.",keyConcepts:["Classes","Objects","Methods","Attributes"],code:'class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display(self):\n        print(f"Name: {self.name}, Age: {self.age}")\n\n# Creating an object\nperson1 = Person("Alice", 25)\nperson1.display()',explanation:"Python supports object-oriented programming. Classes are defined using the 'class' keyword, and objects are instances of classes."},{title:"Data Structures in Python",description:"Using built-in data structures in Python",icon:"\uD83D\uDCE6",difficulty:"Intermediate",definition:"Python provides several built-in data structures: lists, dictionaries, sets, and tuples. These are mutable and can be modified after creation.",keyConcepts:["Lists","Dictionaries","Sets","Tuples"],code:'# List\nmy_list = [1, 2, 3, 4, 5]\nmy_list.append(6)\nmy_list.remove(3)\n\n# Dictionary\nmy_dict = {"name": "Alice", "age": 25}\nmy_dict["city"] = "New York"\n\n# Set\nmy_set = {1, 2, 3, 4, 5}\nmy_set.add(6)\nmy_set.remove(3)\n\n# Tuple\nmy_tuple = (1, 2, 3)\n\n# Accessing elements\nprint(my_list[0])\nprint(my_dict["name"])\nprint(my_set.pop())',explanation:"Python provides several built-in data structures: lists, dictionaries, sets, and tuples. These are mutable and can be modified after creation."},{title:"Machine Learning Concepts",description:"Understanding fundamental machine learning concepts",icon:"\uD83E\uDDE0",difficulty:"Advanced",definition:"Machine learning is a subset of artificial intelligence that involves training algorithms to make predictions or decisions based on data.",keyConcepts:["Supervised Learning","Unsupervised Learning","Regression","Classification"],code:"# Supervised Learning Example (Linear Regression)\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some data\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([2, 4, 6, 8, 10])\n\n# Train a simple linear regression model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Plot the data and predictions\nplt.scatter(X, y, color='blue', label='Actual Data')\nplt.plot(X, predictions, color='red', label='Predicted Data')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.legend()\nplt.show()",explanation:"Machine learning is a subset of artificial intelligence that involves training algorithms to make predictions or decisions based on data."}],"Python")]}),4===v&&(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h4",sx:{color:"#fff",fontWeight:700,mb:4,textAlign:"center"},children:"DSA with Python"}),ee([{title:"Introduction to DSA with Python",description:"Understanding data structures and algorithms using Python",icon:"\uD83D\uDC0D",difficulty:"Beginner",definition:"Data Structures and Algorithms (DSA) with Python combines the power of Python's built-in data structures with algorithmic thinking to solve complex problems efficiently.",keyConcepts:["Python Data Structures","Algorithm Design","Time Complexity","Space Complexity"],code:'# Introduction to DSA with Python\nimport time\n\ndef measure_time(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f"Function {func.__name__} took {end - start:.6f} seconds")\n        return result\n    return wrapper\n\n@measure_time\ndef linear_search(arr, target):\n    for i, element in enumerate(arr):\n        if element == target:\n            return i\n    return -1\n\n# Example usage\nnumbers = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\nresult = linear_search(numbers, target)\nprint(f"Element {target} found at index: {result}")',explanation:"Python provides excellent built-in data structures and libraries for implementing algorithms efficiently. The time module helps measure algorithm performance."},{title:"Arrays and Lists in Python",description:"Working with arrays and dynamic lists",icon:"\uD83D\uDCE6",difficulty:"Beginner",definition:"Python lists are dynamic arrays that can store elements of different types. They provide efficient indexing and slicing operations.",keyConcepts:["Dynamic Arrays","Indexing","Slicing","List Comprehensions"],code:'# Arrays and Lists in Python\nimport array\n\n# Using Python list (dynamic array)\nnumbers = [1, 2, 3, 4, 5]\nprint(f"Original list: {numbers}")\n\n# Adding elements\nnumbers.append(6)\nnumbers.insert(0, 0)\nprint(f"After adding elements: {numbers}")\n\n# Removing elements\nnumbers.remove(3)\npopped = numbers.pop()\nprint(f"After removing elements: {numbers}")\nprint(f"Popped element: {popped}")\n\n# List comprehension\nsquares = [x**2 for x in range(1, 6)]\nprint(f"Squares: {squares}")\n\n# Using array module for type-specific arrays\nint_array = array.array(\'i\', [1, 2, 3, 4, 5])\nprint(f"Integer array: {int_array}")',explanation:"Python lists are versatile and can store any type of data. They provide efficient operations for adding, removing, and accessing elements."},{title:"Stacks and Queues",description:"Implementing stack and queue data structures",icon:"\uD83D\uDCDA",difficulty:"Intermediate",definition:"Stacks follow LIFO (Last In, First Out) principle, while queues follow FIFO (First In, First Out) principle. Both are fundamental data structures.",keyConcepts:["LIFO","FIFO","Push/Pop","Enqueue/Dequeue"],code:'# Stacks and Queues in Python\nfrom collections import deque\n\n# Stack implementation using list\nclass Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        return None\n    \n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        return None\n    \n    def is_empty(self):\n        return len(self.items) == 0\n    \n    def size(self):\n        return len(self.items)\n\n# Queue implementation using deque\nclass Queue:\n    def __init__(self):\n        self.items = deque()\n    \n    def enqueue(self, item):\n        self.items.append(item)\n    \n    def dequeue(self):\n        if not self.is_empty():\n            return self.items.popleft()\n        return None\n    \n    def front(self):\n        if not self.is_empty():\n            return self.items[0]\n        return None\n    \n    def is_empty(self):\n        return len(self.items) == 0\n    \n    def size(self):\n        return len(self.items)\n\n# Example usage\nstack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nprint(f"Stack: {stack.items}")\nprint(f"Popped: {stack.pop()}")\n\nqueue = Queue()\nqueue.enqueue(\'A\')\nqueue.enqueue(\'B\')\nqueue.enqueue(\'C\')\nprint(f"Queue: {list(queue.items)}")\nprint(f"Dequeued: {queue.dequeue()}")',explanation:"Stacks and queues are fundamental data structures. Stacks use LIFO principle, while queues use FIFO principle."},{title:"Linked Lists",description:"Implementing linked list data structure",icon:"\uD83D\uDD17",difficulty:"Intermediate",definition:"A linked list is a linear data structure where elements are stored in nodes, and each node points to the next node in the sequence.",keyConcepts:["Nodes","Pointers","Head/Tail","Traversal"],code:'# Linked List implementation in Python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n    \n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        \n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n    \n    def delete_node(self, key):\n        current = self.head\n        \n        # If head node itself holds the key\n        if current and current.data == key:\n            self.head = current.next\n            current = None\n            return\n        \n        # Search for the key to delete\n        while current and current.next:\n            if current.next.data == key:\n                current.next = current.next.next\n                return\n            current = current.next\n    \n    def display(self):\n        current = self.head\n        elements = []\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        return " ->".join(elements)\n    \n    def search(self, key):\n        current = self.head\n        position = 0\n        while current:\n            if current.data == key:\n                return position\n            current = current.next\n            position += 1\n        return -1\n\n# Example usage\nll = LinkedList()\nll.insert_at_end(1)\nll.insert_at_end(2)\nll.insert_at_end(3)\nll.insert_at_beginning(0)\nprint(f"Linked List: {ll.display()}")\nprint(f"Search 2 at position: {ll.search(2)}")\nll.delete_node(2)\nprint(f"After deleting 2: {ll.display()}")',explanation:"Linked lists consist of nodes where each node contains data and a reference to the next node. They provide efficient insertion and deletion."},{title:"Trees and Binary Trees",description:"Understanding tree data structures",icon:"\uD83C\uDF33",difficulty:"Intermediate",definition:"A tree is a hierarchical data structure with a root node and child nodes. A binary tree is a tree where each node has at most two children.",keyConcepts:["Root","Parent/Child","Leaf","Traversal"],code:'# Binary Tree implementation in Python\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n    \n    def insert(self, data):\n        if self.root is None:\n            self.root = TreeNode(data)\n        else:\n            self._insert_recursive(self.root, data)\n    \n    def _insert_recursive(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = TreeNode(data)\n            else:\n                self._insert_recursive(node.left, data)\n        else:\n            if node.right is None:\n                node.right = TreeNode(data)\n            else:\n                self._insert_recursive(node.right, data)\n    \n    def inorder_traversal(self, node=None):\n        if node is None:\n            node = self.root\n        if node:\n            self.inorder_traversal(node.left)\n            print(node.data, end=" ")\n            self.inorder_traversal(node.right)\n    \n    def preorder_traversal(self, node=None):\n        if node is None:\n            node = self.root\n        if node:\n            print(node.data, end=" ")\n            self.preorder_traversal(node.left)\n            self.preorder_traversal(node.right)\n    \n    def postorder_traversal(self, node=None):\n        if node is None:\n            node = self.root\n        if node:\n            self.postorder_traversal(node.left)\n            self.postorder_traversal(node.right)\n            print(node.data, end=" ")\n    \n    def search(self, key):\n        return self._search_recursive(self.root, key)\n    \n    def _search_recursive(self, node, key):\n        if node is None or node.data == key:\n            return node\n        if key < node.data:\n            return self._search_recursive(node.left, key)\n        return self._search_recursive(node.right, key)\n\n# Example usage\nbt = BinaryTree()\nbt.insert(5)\nbt.insert(3)\nbt.insert(7)\nbt.insert(1)\nbt.insert(9)\n\nprint("Inorder traversal:", end=" ")\nbt.inorder_traversal()\nprint()\n\nprint("Preorder traversal:", end=" ")\nbt.preorder_traversal()\nprint()\n\nprint("Postorder traversal:", end=" ")\nbt.postorder_traversal()\nprint()\n\n# Search for a node\nresult = bt.search(3)\nif result:\n    print(f"Found node with data: {result.data}")\nelse:\n    print("Node not found")',explanation:"Trees are hierarchical data structures. Binary trees have at most two children per node. Traversal methods include inorder, preorder, and postorder."},{title:"Graphs and Graph Algorithms",description:"Working with graph data structures",icon:"\uD83D\uDD78️",difficulty:"Advanced",definition:"A graph is a collection of nodes (vertices) connected by edges. Graphs can be directed or undirected and are used to model relationships.",keyConcepts:["Vertices","Edges","Adjacency","Traversal"],code:'# Graph implementation in Python\nfrom collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n    \n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n    \n    def bfs(self, start):\n        visited = set()\n        queue = deque([start])\n        visited.add(start)\n        result = []\n        \n        while queue:\n            vertex = queue.popleft()\n            result.append(vertex)\n            \n            for neighbor in self.graph[vertex]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n        \n        return result\n    \n    def dfs(self, start, visited=None):\n        if visited is None:\n            visited = set()\n        \n        visited.add(start)\n        result = [start]\n        \n        for neighbor in self.graph[start]:\n            if neighbor not in visited:\n                result.extend(self.dfs(neighbor, visited))\n        \n        return result\n    \n    def has_cycle(self):\n        visited = set()\n        rec_stack = set()\n        \n        def dfs_cycle(node):\n            visited.add(node)\n            rec_stack.add(node)\n            \n            for neighbor in self.graph[node]:\n                if neighbor not in visited:\n                    if dfs_cycle(neighbor):\n                        return True\n                elif neighbor in rec_stack:\n                    return True\n            \n            rec_stack.remove(node)\n            return False\n        \n        for node in self.graph:\n            if node not in visited:\n                if dfs_cycle(node):\n                    return True\n        return False\n\n# Example usage\ng = Graph()\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 2)\ng.add_edge(2, 0)\ng.add_edge(2, 3)\ng.add_edge(3, 3)\n\nprint("BFS starting from vertex 2:")\nprint(g.bfs(2))\n\nprint("DFS starting from vertex 2:")\nprint(g.dfs(2))\n\nprint(f"Graph has cycle: {g.has_cycle()}")',explanation:"Graphs represent relationships between objects. BFS explores level by level, while DFS explores as far as possible along each branch."},{title:"Sorting Algorithms",description:"Implementing various sorting algorithms",icon:"\uD83D\uDCCA",difficulty:"Intermediate",definition:"Sorting algorithms arrange elements in a specific order. Different algorithms have different time and space complexities.",keyConcepts:["Time Complexity","Space Complexity","Stability","In-place"],code:'# Sorting Algorithms in Python\nimport time\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\ndef selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i + 1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    return quick_sort(left) + middle + quick_sort(right)\n\n# Example usage\narr = [64, 34, 25, 12, 22, 11, 90]\nprint(f"Original array: {arr}")\n\n# Test different sorting algorithms\nalgorithms = [\n    ("Bubble Sort", bubble_sort),\n    ("Selection Sort", selection_sort),\n    ("Insertion Sort", insertion_sort),\n    ("Merge Sort", merge_sort),\n    ("Quick Sort", quick_sort)\n]\n\nfor name, algorithm in algorithms:\n    test_arr = arr.copy()\n    start_time = time.time()\n    sorted_arr = algorithm(test_arr)\n    end_time = time.time()\n    print(f"{name}: {sorted_arr} (Time: {end_time - start_time:.6f}s)")',explanation:"Different sorting algorithms have different trade-offs. Bubble sort is simple but slow, while quick sort is fast but complex."},{title:"Searching Algorithms",description:"Implementing various searching algorithms",icon:"\uD83D\uDD0D",difficulty:"Intermediate",definition:"Searching algorithms find specific elements in data structures. Different algorithms work best for different scenarios.",keyConcepts:["Linear Search","Binary Search","Time Complexity","Space Complexity"],code:'# Searching Algorithms in Python\nimport time\n\ndef linear_search(arr, target):\n    for i, element in enumerate(arr):\n        if element == target:\n            return i\n    return -1\n\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\ndef binary_search_recursive(arr, target, left=0, right=None):\n    if right is None:\n        right = len(arr) - 1\n    \n    if left > right:\n        return -1\n    \n    mid = (left + right) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search_recursive(arr, target, mid + 1, right)\n    else:\n        return binary_search_recursive(arr, target, left, mid - 1)\n\ndef jump_search(arr, target):\n    n = len(arr)\n    step = int(n ** 0.5)\n    \n    # Finding the block where element is present\n    prev = 0\n    while prev < n and arr[min(step, n) - 1] < target:\n        prev = step\n        step += int(n ** 0.5)\n        if prev >= n:\n            return -1\n    \n    # Linear search in the identified block\n    while prev < min(step, n):\n        if arr[prev] == target:\n            return prev\n        prev += 1\n    \n    return -1\n\n# Example usage\narr = [2, 3, 4, 10, 40, 50, 60, 70, 80, 90, 100]\ntarget = 10\nprint(f"Array: {arr}")\nprint(f"Searching for: {target}")\n\n# Test different searching algorithms\nalgorithms = [\n    ("Linear Search", linear_search),\n    ("Binary Search", binary_search),\n    ("Binary Search (Recursive)", binary_search_recursive),\n    ("Jump Search", jump_search)\n]\n\nfor name, algorithm in algorithms:\n    start_time = time.time()\n    result = algorithm(arr, target)\n    end_time = time.time()\n    if result != -1:\n        print(f"{name}: Found at index {result} (Time: {end_time - start_time:.6f}s)")\n    else:\n        print(f"{name}: Not found (Time: {end_time - start_time:.6f}s)")',explanation:"Linear search works on any array but is slow. Binary search is fast but requires sorted arrays. Jump search is a compromise between the two."},{title:"Dynamic Programming",description:"Solving problems using dynamic programming",icon:"\uD83E\uDDE9",difficulty:"Advanced",definition:"Dynamic programming is a method for solving complex problems by breaking them down into simpler subproblems and storing the results.",keyConcepts:["Memoization","Tabulation","Optimal Substructure","Overlapping Subproblems"],code:'# Dynamic Programming Examples in Python\n\n# Fibonacci with memoization\ndef fibonacci_memo(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    \n    memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo)\n    return memo[n]\n\n# Fibonacci with tabulation\ndef fibonacci_tab(n):\n    if n <= 1:\n        return n\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    \n    return dp[n]\n\n# Longest Common Subsequence\ndef lcs(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]\n\n# Knapsack Problem\ndef knapsack(weights, values, capacity):\n    n = len(weights)\n    dp = [[0] * (capacity + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for w in range(capacity + 1):\n            if weights[i - 1] <= w:\n                dp[i][w] = max(dp[i - 1][w], \n                              dp[i - 1][w - weights[i - 1]] + values[i - 1])\n            else:\n                dp[i][w] = dp[i - 1][w]\n    \n    return dp[n][capacity]\n\n# Example usage\nprint("Fibonacci with memoization:")\nfor i in range(10):\n    print(f"F({i}) = {fibonacci_memo(i)}")\n\nprint("\\nFibonacci with tabulation:")\nfor i in range(10):\n    print(f"F({i}) = {fibonacci_tab(i)}")\n\nprint("\\nLongest Common Subsequence:")\nstr1 = "ABCDGH"\nstr2 = "AEDFHR"\nprint(f"LCS of \'{str1}\' and \'{str2}\': {lcs(str1, str2)}")\n\nprint("\\nKnapsack Problem:")\nweights = [2, 1, 3, 2]\nvalues = [12, 10, 20, 15]\ncapacity = 5\nprint(f"Maximum value: {knapsack(weights, values, capacity)}")',explanation:"Dynamic programming solves complex problems by breaking them into simpler subproblems and storing results to avoid redundant calculations."}],"DSA_Python")]}),5===v&&(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h4",sx:{color:"#fff",fontWeight:700,mb:4,textAlign:"center"},children:"Machine Learning Concepts"}),ee([{title:"Introduction to Machine Learning",description:"Understanding the basics of machine learning",icon:"\uD83E\uDDE0",difficulty:"Beginner",definition:"Machine learning is a subset of artificial intelligence that involves training algorithms to make predictions or decisions based on data.",keyConcepts:["Supervised Learning","Unsupervised Learning","Regression","Classification"],code:"# Supervised Learning Example (Linear Regression)\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some data\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([2, 4, 6, 8, 10])\n\n# Train a simple linear regression model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Plot the data and predictions\nplt.scatter(X, y, color='blue', label='Actual Data')\nplt.plot(X, predictions, color='red', label='Predicted Data')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.legend()\nplt.show()",explanation:"Machine learning is a subset of artificial intelligence that involves training algorithms to make predictions or decisions based on data."},{title:"Supervised Learning",description:"Training algorithms to make predictions",icon:"\uD83E\uDDE0",difficulty:"Intermediate",definition:"Supervised learning involves training an algorithm on labeled data to make predictions or decisions.",keyConcepts:["Training Data","Labels","Predictions","Model Evaluation"],code:"# Linear Regression Example\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some data\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([2, 4, 6, 8, 10])\n\n# Train a simple linear regression model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Plot the data and predictions\nplt.scatter(X, y, color='blue', label='Actual Data')\nplt.plot(X, predictions, color='red', label='Predicted Data')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.legend()\nplt.show()",explanation:"Supervised learning involves training an algorithm on labeled data to make predictions or decisions."},{title:"Unsupervised Learning",description:"Training algorithms on unlabeled data",icon:"\uD83E\uDDE0",difficulty:"Intermediate",definition:"Unsupervised learning involves training an algorithm on unlabeled data to discover patterns or structure.",keyConcepts:["Unlabeled Data","Patterns","Clustering","Dimensionality Reduction"],code:"# K-Means Clustering Example\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\n# Generate some data\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n\n# Train a K-Means model\nkmeans = KMeans(n_clusters=2, random_state=0)\nkmeans.fit(X)\n\n# Get cluster centers and labels\ncenters = kmeans.cluster_centers_\nlabels = kmeans.labels_\n\n# Plot the data and cluster centers\nplt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')\nplt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75)\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('K-Means Clustering')\nplt.show()",explanation:"Unsupervised learning involves training an algorithm on unlabeled data to discover patterns or structure."},{title:"Deep Learning",description:"Using neural networks for complex tasks",icon:"\uD83E\uDDE0",difficulty:"Advanced",definition:"Deep learning is a subfield of machine learning that uses neural networks with multiple layers to learn representations of data.",keyConcepts:["Neural Networks","Layers","Activation Functions","Backpropagation"],code:"# Simple Neural Network Example\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Generate some data\nX, y = make_classification(n_samples=100, n_features=2, n_informative=2, n_redundant=0, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Standardize features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Train a simple neural network\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train_scaled, y_train, epochs=100, batch_size=5, verbose=0)\n\n# Make predictions\npredictions = model.predict(X_test_scaled)\npredictions = (predictions > 0.5).astype(int)\n\n# Plot the data and decision boundary\nplt.scatter(X_test_scaled[:, 0], X_test_scaled[:, 1], c=y_test, cmap='viridis', alpha=0.6)\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Simple Neural Network Decision Boundary')\nplt.show()",explanation:"Deep learning is a subfield of machine learning that uses neural networks with multiple layers to learn representations of data."}],"ML")]}),6===v&&(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{variant:"h4",sx:{color:"#fff",fontWeight:700,mb:4,textAlign:"center"},children:"Java Programming"}),ee([{title:"Introduction to Java Programming",description:"Learn the basics of Java programming language",icon:"☕",difficulty:"Beginner",definition:"Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible.",keyConcepts:["Object-Oriented Programming","Class-based","Platform Independence","Robustness"],code:'public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}',explanation:"This is the basic structure of a Java program. The 'public' keyword makes the class accessible from outside, 'static' means it can be called without an instance, and 'void' means it doesn't return a value."},{title:"Variables and Data Types",description:"Understanding different data types in Java",icon:"\uD83D\uDCCA",difficulty:"Beginner",definition:"Variables are named memory locations that store data values. Data types define the type and size of data that can be stored in variables.",keyConcepts:["Memory Allocation","Type Safety","Size Specifications","Value Storage"],code:'public class Variables {\n    public static void main(String[] args) {\n        int age = 25;\n        float salary = 50000.50f;\n        char grade = \'A\';\n        double pi = 3.14159;\n\n        System.out.println("Age: " + age);\n        System.out.println("Salary: " + salary);\n        System.out.println("Grade: " + grade);\n        System.out.println("Pi: " + pi);\n    }\n}',explanation:"Java supports various data types: int for integers, float for decimals, char for characters, and double for high-precision decimals."},{title:"Control Structures",description:"Mastering loops and conditional statements",icon:"\uD83D\uDD04",difficulty:"Intermediate",definition:"Control structures are programming constructs that determine the flow of program execution based on conditions and loops.",keyConcepts:["Conditional Logic","Loop Control","Flow Control","Decision Making"],code:'public class ControlStructures {\n    public static void main(String[] args) {\n        int age = 20;\n\n        // If-else statement\n        if (age >= 18) {\n            System.out.println("Adult");\n        } else {\n            System.out.println("Minor");\n        }\n\n        // For loop\n        for (int i = 0; i < 10; i++) {\n            System.out.print(i + " ");\n        }\n        System.out.println();\n\n        // While loop\n        int count = 0;\n        while (count < 5) {\n            System.out.println("Count: " + count);\n            count++;\n        }\n    }\n}',explanation:"Control structures allow you to make decisions and repeat code blocks. Use if-else for conditions, for/while for loops."},{title:"Functions",description:"Creating reusable code blocks",icon:"⚙️",difficulty:"Intermediate",definition:"Functions are self-contained blocks of code that perform specific tasks. They promote code reusability and modularity.",keyConcepts:["Code Reusability","Modularity","Parameter Passing","Return Values"],code:'public class Functions {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static void greet(String name) {\n        System.out.println("Hello, " + name + "!");\n    }\n\n    public static void main(String[] args) {\n        int result = add(5, 3);\n        System.out.println("Sum: " + result);\n        \n        greet("Student");\n    }\n}',explanation:"Functions help organize code into reusable blocks. They can return values or perform actions without returning anything (void)."},{title:"Arrays",description:"Working with collections of data",icon:"\uD83D\uDCE6",difficulty:"Intermediate",definition:"Arrays are collections of elements of the same data type stored in contiguous memory locations.",keyConcepts:["Contiguous Memory","Index-based Access","Fixed Size","Homogeneous Data"],code:'public class Arrays {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n\n        // Accessing array elements\n        System.out.println("First element: " + numbers[0]);\n        System.out.println("Last element: " + numbers[4]);\n\n        // Looping through array\n        for (int i = 0; i < 5; i++) {\n            System.out.println("numbers[" + i + "] = " + numbers[i]);\n        }\n    }\n}',explanation:"Arrays store multiple values of the same type. Elements are accessed using index numbers starting from 0."},{title:"Pointers",description:"Understanding memory addresses",icon:"\uD83D\uDCCD",difficulty:"Advanced",definition:"Pointers are variables that store memory addresses of other variables. They provide direct access to memory locations.",keyConcepts:["Memory Addresses","Indirect Access","Dynamic Memory","Address Arithmetic"],code:'public class Pointers {\n    public static void main(String[] args) {\n        int number = 42;\n        int *ptr = &number;  // Pointer to number\n\n        System.out.println("Value: " + number);\n        System.out.println("Address: " + ptr);\n        System.out.println("Pointer value: " + *ptr);\n\n        // Modifying value through pointer\n        *ptr = 100;\n        System.out.println("New value: " + number);\n    }\n}',explanation:"Pointers store memory addresses. They allow direct manipulation of memory and are fundamental to C programming."}],"Java")]})]},v)}),(0,r.jsx)(h.P.div,{initial:{opacity:0,y:30},animate:{opacity:1,y:0},transition:{duration:.8,delay:.6},children:(0,r.jsx)(a.A,{sx:{textAlign:"center",mt:8},children:(0,r.jsxs)(s.A,{elevation:0,sx:{background:"linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(0, 153, 204, 0.1) 100%)",backdropFilter:"blur(20px)",border:"1px solid rgba(0, 212, 255, 0.2)",borderRadius:3,p:4},children:[(0,r.jsx)(o.A,{variant:"h5",sx:{color:"#fff",fontWeight:600,mb:2},children:"Ready to Practice?"}),(0,r.jsx)(o.A,{variant:"body1",sx:{color:"#b0b0b0",mb:3},children:"Start a new journey with our Academy"}),(0,r.jsx)(c.A,{variant:"contained",size:"large",startIcon:(0,r.jsx)(L.A,{}),onClick:()=>{let e=encodeURIComponent("Hi! I want to join Shetty Sir's Coding Academy. Please provide me with more information about the courses and enrollment process."),n="https://wa.me/".concat("919209455752","?text=").concat(e);window.open(n,"_blank")},sx:{background:"linear-gradient(135deg, #25D366 0%, #128C7E 100%)",borderRadius:2,px:4,py:1.5,fontWeight:600,textTransform:"uppercase",letterSpacing:"0.5px","&:hover":{background:"linear-gradient(135deg, #128C7E 0%, #075E54 100%)",transform:"translateY(-2px)",boxShadow:"0 8px 25px rgba(37, 211, 102, 0.3)"}},children:"Join Now"})]})})})]})]})})]})}},31691:(e,n,t)=>{"use strict";t.d(n,{A:()=>k});var r=t(1521),i=t(74584),a=t(87468),s=t(19816),o=t(68143),l=t(9095),d=t(63820),c=t(68727),u=t(96028),p=t(46140),m=t(71062),f=t(3245),g=t(33246),h=t(16850);function y(e){return(0,h.Ay)("MuiIconButton",e)}let b=(0,g.A)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge","loading","loadingIndicator","loadingWrapper"]);var v=t(73365);let x=(0,l.Ay)(p.A,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,n)=>{let{ownerState:t}=e;return[n.root,t.loading&&n.loading,"default"!==t.color&&n["color".concat((0,f.A)(t.color))],t.edge&&n["edge".concat((0,f.A)(t.edge))],n["size".concat((0,f.A)(t.size))]]}})((0,d.A)(e=>{let{theme:n}=e;return{textAlign:"center",flex:"0 0 auto",fontSize:n.typography.pxToRem(24),padding:8,borderRadius:"50%",color:(n.vars||n).palette.action.active,transition:n.transitions.create("background-color",{duration:n.transitions.duration.shortest}),variants:[{props:e=>!e.disableRipple,style:{"--IconButton-hoverBg":n.vars?"rgba(".concat(n.vars.palette.action.activeChannel," / ").concat(n.vars.palette.action.hoverOpacity,")"):(0,s.X4)(n.palette.action.active,n.palette.action.hoverOpacity),"&:hover":{backgroundColor:"var(--IconButton-hoverBg)","@media (hover: none)":{backgroundColor:"transparent"}}}},{props:{edge:"start"},style:{marginLeft:-12}},{props:{edge:"start",size:"small"},style:{marginLeft:-3}},{props:{edge:"end"},style:{marginRight:-12}},{props:{edge:"end",size:"small"},style:{marginRight:-3}}]}}),(0,d.A)(e=>{let{theme:n}=e;return{variants:[{props:{color:"inherit"},style:{color:"inherit"}},...Object.entries(n.palette).filter((0,c.A)()).map(e=>{let[t]=e;return{props:{color:t},style:{color:(n.vars||n).palette[t].main}}}),...Object.entries(n.palette).filter((0,c.A)()).map(e=>{let[t]=e;return{props:{color:t},style:{"--IconButton-hoverBg":n.vars?"rgba(".concat((n.vars||n).palette[t].mainChannel," / ").concat(n.vars.palette.action.hoverOpacity,")"):(0,s.X4)((n.vars||n).palette[t].main,n.palette.action.hoverOpacity)}}}),{props:{size:"small"},style:{padding:5,fontSize:n.typography.pxToRem(18)}},{props:{size:"large"},style:{padding:12,fontSize:n.typography.pxToRem(28)}}],["&.".concat(b.disabled)]:{backgroundColor:"transparent",color:(n.vars||n).palette.action.disabled},["&.".concat(b.loading)]:{color:"transparent"}}})),A=(0,l.Ay)("span",{name:"MuiIconButton",slot:"LoadingIndicator"})(e=>{let{theme:n}=e;return{display:"none",position:"absolute",visibility:"visible",top:"50%",left:"50%",transform:"translate(-50%, -50%)",color:(n.vars||n).palette.action.disabled,variants:[{props:{loading:!0},style:{display:"flex"}}]}}),k=r.forwardRef(function(e,n){let t=(0,u.b)({props:e,name:"MuiIconButton"}),{edge:r=!1,children:s,className:l,color:d="default",disabled:c=!1,disableFocusRipple:p=!1,size:g="medium",id:h,loading:b=null,loadingIndicator:k,..._}=t,S=(0,o.A)(h),w=null!=k?k:(0,v.jsx)(m.A,{"aria-labelledby":S,color:"inherit",size:16}),C={...t,edge:r,color:d,disabled:c,disableFocusRipple:p,loading:b,loadingIndicator:w,size:g},j=(e=>{let{classes:n,disabled:t,color:r,edge:i,size:s,loading:o}=e,l={root:["root",o&&"loading",t&&"disabled","default"!==r&&"color".concat((0,f.A)(r)),i&&"edge".concat((0,f.A)(i)),"size".concat((0,f.A)(s))],loadingIndicator:["loadingIndicator"],loadingWrapper:["loadingWrapper"]};return(0,a.A)(l,y,n)})(C);return(0,v.jsxs)(x,{id:b?S:h,className:(0,i.A)(j.root,l),centerRipple:!0,focusRipple:!p,disabled:c||b,ref:n,..._,ownerState:C,children:["boolean"==typeof b&&(0,v.jsx)("span",{className:j.loadingWrapper,style:{display:"contents"},children:(0,v.jsx)(A,{className:j.loadingIndicator,ownerState:C,children:b&&w})}),s]})})},41193:(e,n,t)=>{"use strict";function r(e){return e&&e.ownerDocument||document}t.d(n,{A:()=>r})},63574:(e,n,t)=>{"use strict";t.d(n,{A:()=>i});var r=t(41193);function i(e){return(0,r.A)(e).defaultView||window}},71555:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var r=t(93439),i=t(73365);let a=(0,r.A)((0,i.jsx)("path",{d:"M9.4 16.6 4.8 12l4.6-4.6L8 6l-6 6 6 6zm5.2 0 4.6-4.6-4.6-4.6L16 6l6 6-6 6z"}),"Code")},84721:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var r=t(93439),i=t(73365);let a=(0,r.A)((0,i.jsx)("path",{d:"M8 5v14l11-7z"}),"PlayArrow")},89459:(e,n,t)=>{Promise.resolve().then(t.bind(t,29033))}},e=>{e.O(0,[458,118,545,433,516,262,347,508,358],()=>e(e.s=89459)),_N_E=e.O()}]);